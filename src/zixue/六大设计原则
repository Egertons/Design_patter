1.开闭原则
    一个类或实体应该对“扩展”开放，对“修改”关闭。
    解读：用抽象构建框架，用实现扩展细节。不以改动原有类的方式来实现新需求，
        而是应该以实现事先抽象出来的接口（或具体类继承抽象类）的方式来实现。
    优点：开闭原则的优点在于可以在不改动原有代码的前提下给程序扩展功能。
        增加了程序的可扩展性，同时也降低了程序的维护成本。
2.单一职责原则
    一个类只允许有一个职责，即只有一个导致该类变更的原因。
    解读：类职责的变化往往就是导致类变化的原因：也就是说如果一个类具有多种职责，就会有多种导致这个类
        变化的原因，从而导致这个类的维护变得困难。往往在软件开发中，随着需求的不断增加，可能会给原来
        的类添加一些本来不属于它的一些职责，从而违反了单一职责原则。如果我们发现当前类的职责不仅仅有
        一个，就应该将本来不属于该类真正的职责分离出去。不仅仅是类，函数也要遵循单一职责原则，即一个
        函数制作一件事情。如果发现一个函数里面有不同的任务，则需要将不同的任务以另一个函数的形式分离
        出去。
    优点：如果类与方法的职责划分的很清晰，不但可以提高代码的可读性，更实际性地更降低了程序出错的风险，
        因为清晰的代码会让bug无处藏身，也有利于bug的追踪，也就是降低了程序的维护成本。
3.依赖倒置原则
    依赖抽象而不是依赖实现。抽象不应该依赖细节，细节应该依赖抽象。高层模块不能依赖低层模块，二者都
        应该依赖抽象。
    解读：针对接口编程，而不是针对实现编程。尽量不要从具体的类派生，而是以继承抽象类或实现接口来实现。
        关于高层模块与低层模块的划分可以按照决策能力的高低进行划分。业务层自然就处于上层模块，逻辑层
        和数据层自然就归类为底层。
    优点：通过抽象来搭建框架，建立类和类的关联，以减少类间的耦合性。而且以抽象搭建的系统要比以具体
        实现搭建的系统更加稳定，扩展性更高，同时也便于维护。
4.接口隔离原则
    多个特定的客户端接口要好于一个通用性的总接口。
    解读：客户端不应该依赖它不需要实现的接口。不建立庞大臃肿的接口，应尽量细化接口，接口中的方法应
        尽量少。需要注意的是接口的力度也不能太小，如果过小，则会造成接口数量过多，使设计复杂化。